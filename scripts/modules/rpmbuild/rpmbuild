#!/usr/bin/env bash
# @import lang/required
# @import console/info
# @import console/error
# @import lang/truth
# @import string/kebabCase
# @import rpmbuild/find_rpm_resources

rpmbuild() {
  local defaultConfiguration
  local platform="${PLATFORM}"

  if required "${platform}"; then
    case "${platform}" in
    linux/amd64)
      defaultConfiguration="centos-stream+epel-10-x86_64"
      ;;
    linux/arm64)
      defaultConfiguration="centos-stream+epel-10-aarch64"
      ;;
    *)
      error "Unsupported platform: ${platform}"
      return 1
      ;;
    esac
  else
    case "$(uname -m)" in
    x86_64 | amd64)
      platform="linux/amd64"
      defaultConfiguration="centos-stream+epel-10-x86_64"
      ;;
    aarch64)
      platform="linux/arm64/v8"
      defaultConfiguration="centos-stream+epel-10-aarch64"
      ;;
    *)
      error "Unsupported architecture: $(uname -m)"
      return 1
      ;;
    esac
  fi

  local name="$1"

  local configuration="${2:-${defaultConfiguration}}"
  local scope="${DOCKER_SCOPE:-internal}"
  local main="${scope}/rpmbuild"

  required "$name" || {
    error 'Nothing to do'

    return 1
  }

  local SOURCES="${MANAGE_REPOSITORY}/SOURCES"
  local SPECS="${MANAGE_REPOSITORY}/SPECS"
  local SRPMS="${MANAGE_REPOSITORY}/SRPMS"
  local RPMS="${MANAGE_REPOSITORY}/RPMS"

  if truth "$DOCKER"; then
    local file
    file="$(find_rpm_resources "${name}" "/tmp/repository/SPECS" "/tmp/repository/SOURCES" "/tmp/repository/SRPMS")"

    rm -rf "${MANAGE_REPOSITORY}"/{BUILD,RPMS,SPECS,SRPMS,SOURCES}
    mkdir -p "${MANAGE_REPOSITORY}"/{BUILD,RPMS,SPECS,SRPMS}

    if [[ "$file" == *.spec ]]; then
      cp -rf "/tmp/repository/SOURCES/${name}" "${SOURCES}"
      cp -rf "/tmp/repository/SPECS/${name}.spec" "${SPECS}/${name}.spec"
    else
      cp -rf "${file}" "${SRPMS}"
    fi

    _ info "Starting mock with ${configuration} configuration."

    sudo /usr/bin/mock --enable-network -r "${configuration}" --no-bootstrap-image --dnf --init --isolation=simple

    _ info "Building SRPMs."

    if [[ "${name}" =~ ^python ]]; then
      local rpm_globs=(
        "/tmp/repository/RPMS/llhttp*.$(uname -m).rpm"
        "/tmp/repository/RPMS/python*.noarch.rpm"
        "/tmp/repository/RPMS/python*.$(uname -m).rpm"
      )

      # Array to hold resolved RPM files
      rpm_files=()

      # Resolve the globs and add matching files to the array
      for glob in "${rpm_globs[@]}"; do
        for glob_file in $glob; do
          if [[ -f "$glob_file" ]]; then
            rpm_files+=("--install" "$glob_file")
          fi
        done
      done

      if [[ ${#rpm_files[@]} -gt 0 ]]; then
        /usr/bin/mock --enable-network --isolation=simple --no-bootstrap-image -r "${configuration}" \
          --no-clean \
          --no-cleanup-after \
          "${rpm_files[@]}"
      fi
    fi

    if [[ "${name}" == "spice" ]]; then
      /usr/bin/mock --enable-network --isolation=simple --no-bootstrap-image -r "${configuration}" \
        --no-clean \
        --no-cleanup-after \
        --install "/tmp/repository/RPMS/libcacard-2.8.1-8.el10.$(uname -m).rpm" \
        --install "/tmp/repository/RPMS/libcacard-devel-2.8.1-8.el10.$(uname -m).rpm"
    fi

    if [[ "${name}" == "knot-resolver" ]]; then
      /usr/bin/mock --enable-network --isolation=simple --no-bootstrap-image -r "${configuration}" \
        --no-clean \
        --no-cleanup-after \
        --install "/tmp/repository/RPMS/jemalloc-5.3.0-6.el10.$(uname -m).rpm" \
        --install "/tmp/repository/RPMS/jemalloc-devel-5.3.0-6.el10.$(uname -m).rpm"
    fi

    if [[ "${name}" == "qemu" ]]; then
      /usr/bin/mock --enable-network --isolation=simple --no-bootstrap-image -r "${configuration}" \
        --no-clean \
        --no-cleanup-after \
        --install "/tmp/repository/RPMS/libiscsi-devel-1.20.0-3.el10.$(uname -m).rpm" \
        --install "/tmp/repository/RPMS/libiscsi-1.20.0-3.el10.$(uname -m).rpm" \
        --install "/tmp/repository/RPMS/libcacard-2.8.1-8.el10.$(uname -m).rpm" \
        --install "/tmp/repository/RPMS/libcacard-devel-2.8.1-8.el10.$(uname -m).rpm" \
        --install "/tmp/repository/RPMS/spice-server-0.15.1-4.el10.$(uname -m).rpm" \
        --install "/tmp/repository/RPMS/spice-server-devel-0.15.1-4.el10.$(uname -m).rpm" \
        --install "/tmp/repository/RPMS/virglrenderer-1.0.1-2.el10.$(uname -m).rpm" \
        --install "/tmp/repository/RPMS/virglrenderer-devel-1.0.1-2.el10.$(uname -m).rpm"
    fi

    if [[ "${name}" == "git" ]]; then
      /usr/bin/mock --enable-network --isolation=simple --no-bootstrap-image -r "${configuration}" \
        --no-clean \
        --no-cleanup-after \
        --install "/tmp/repository/RPMS/llhttp-devel-9.2.1-1.el10.$(uname -m).rpm" \
        --install "/tmp/repository/RPMS/llhttp-9.2.1-1.el10.$(uname -m).rpm" \
        --install "/tmp/repository/RPMS/highlight-4.12-1.el10.$(uname -m).rpm"
    fi

    if [[ "$file" == *.spec ]]; then
      /usr/bin/mock --enable-network --isolation=simple --no-bootstrap-image -r "${configuration}" \
        --no-clean \
        --no-cleanup-after \
        --buildsrpm \
        --spec="${SPECS}/${name}.spec" \
        --sources="${SOURCES}" \
        --resultdir="${SRPMS}"
    fi

    _ info "Building RPMs."

    /usr/bin/mock --enable-network --isolation=simple --no-bootstrap-image -r "${configuration}" \
      --no-clean \
      --no-cleanup-after \
      --rebuild "$(find "${SRPMS}" -type f -name "*.src.rpm")" \
      --resultdir="${RPMS}"

    sudo find "${RPMS}" -type f -name "*.rpm" -not -name '*.src.rpm' -exec cp -f {} /tmp/repository/RPMS \;
    sudo find "/tmp/repository/RPMS" -type f -name "*.rpm" -not -name '*.src.rpm' -exec chown "${HOST_UID}:${HOST_GID}" {} \;

    sudo find "${SRPMS}" -type f -name "*.src.rpm" -exec cp -f {} /tmp/repository/SRPMS \;
    sudo find "/tmp/repository/RPMS" -type f -name "*.src.rpm" -exec chown "${HOST_UID}:${HOST_GID}" {} \;
  else
    if find_rpm_resources "${name}" "${SPECS}" "${SOURCES}" "${SRPMS}"; then
      info "Processing \"${name}\" ..."

      docker run --platform "${platform}" \
        --rm --privileged \
        -v "${MANAGE_REPOSITORY}":/tmp/repository \
        -e HOST_UID="$(id -u)" \
        -e HOST_GID="$(id -g)" \
        -e PLATFORM="${platform}" \
        "${main}" build "${name}"
    else
      echo "Unable to find ${name}"
      return 1
    fi
  fi
}
